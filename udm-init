#!/bin/sh
# Init script for booting into a custom kernel on the UDM (Pro).
#
# Copyright (C) 2021 Fabian Mastenbroek.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# Perform initial setup of the system by mounting the procfs and sysfs and
# installing busybox.
setup_system() {
    # Create all the symlinks to /bin/busybox
    /bin/busybox --install -s

    mount -t proc proc /proc
    mount -t sysfs sysfs /sys
    mount -t devtmpfs none /dev

    # Disable kernel messages from popping onto the screen and clear the screen
    echo 0 > /proc/sys/kernel/printk
    clear
}

# Setup the modprobe configuration for loading older versions of proprietary
# kernel modules.
setup_modprobe_config() {
    mkdir -p "$OVERLAY_UPPER"/etc/modprobe.d
    touch "$OVERLAY_UPPER"/etc/modprobe.d/udm-kernel-tools.conf
    KERNEL_MODDIR=$(find "$OVERLAY_ROOT"/lib/modules/ -mindepth 1 -maxdepth 1 -type d | head -n1)
    KERNEL_RELEASE=$(basename "$KERNEL_MODDIR")
    if [ -d "$KERNEL_MODDIR/extra" ]; then 
    	for MODPATH in "$KERNEL_MODDIR"/extra/*.ko; do
        	MODNAME=$(basename "$MODPATH" | sed 's/\.ko//')
        	echo "install $MODNAME /sbin/modprobe --ignore-install -f -S $KERNEL_RELEASE $MODNAME" >> "$OVERLAY_UPPER"/etc/modprobe.d/udm-kernel-tools.conf
    	done
    else
        echo "udm-init: no extra modules found"
    fi
}

# Disable the RAM overlay that UniFi OS tries to mount. We already do it.
setup_disable_overlay() {
    mkdir -p "$OVERLAY_UPPER"/sbin
    echo '#!/bin/sh' > "$OVERLAY_UPPER"/sbin/mount_ram_overlay.sh
    echo 'echo RAM overlay already exists' >> "$OVERLAY_UPPER"/sbin/mount_ram_overlay.sh
    chmod +x "$OVERLAY_UPPER"/sbin/mount_ram_overlay.sh
}

# Setup kmod for overriding modules
setup_kmod() {
    mkdir -p "$OVERLAY_UPPER"/sbin "$OVERLAY_UPPER"/bin
    cp /bin/kmod "$OVERLAY_UPPER"/bin/kmod
    for path in bin/lsmod sbin/depmod sbin/insmod sbin/lsmod sbin/modinfo sbin/modprobe sbin/rmmod; do
        ln -sf /bin/kmod "$OVERLAY_UPPER"/$path
    done
}

# Setup the kernel modules
setup_modules() {
    mkdir -p "$OVERLAY_UPPER"/lib/modules
    cp -r /lib/modules/* "$OVERLAY_UPPER"/lib/modules
}

# Function for parsing command line options with "=" in them
get_opt() {
    echo "$@" | cut -d "=" -f 2
}

# Perform initial system setup
setup_system

# Defaults
init="/sbin/init"
root="/dev/sdb3"

# Process command line options
for i in $(cat /proc/cmdline); do
    case $i in
    root\=*)
        root=$(get_opt $i)
        ;;
    init\=*)
        init=$(get_opt $i)
        ;;
    esac
done

echo "udm-init: running initial setup [root=$root, init=$init]"

OVERLAY=/overlay
OVERLAY_ROOT=$OVERLAY/root_ro
OVERLAY_RW=$OVERLAY/rw
OVERLAY_UPPER=$OVERLAY_RW/upper
OVERLAY_WORK=$OVERLAY_RW/work

# Mount the root device
mkdir -p $OVERLAY_ROOT
mount "$root" $OVERLAY_ROOT

# Prepare overlay layer
mkdir -p $OVERLAY_RW
mount -t tmpfs none $OVERLAY_RW
mkdir -p $OVERLAY_UPPER $OVERLAY_WORK

# Mount overlay
mount -t overlay none -olowerdir=$OVERLAY_ROOT,upperdir=$OVERLAY_UPPER,workdir=$OVERLAY_WORK /root
mount --rbind $OVERLAY /root/overlay

echo "udm-init: initializing module workaround..."
setup_modprobe_config
setup_kmod
setup_disable_overlay

setup_modules

echo "udm-init: booting into UniFi OS..."
# Check if $init exists and is executable
if [ -x "/root$init" ]; then
    # Unmount all other mounts so that the ram used by
    # the initramfs can be cleared after switch_root
    umount /proc
    umount /sys
    umount /dev

    # Switch to the new root and execute init
    exec switch_root /root "$init"
fi

# This will only be run if the exec above failed
echo "udm-init: failed to switch_root, dropping to a rescue shell..."
exec sh
