#!/bin/bash
# Bash script for booting into custom kernels on the UDM (Pro).
#
# Copyright (C) 2021 Fabian Mastenbroek.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

set -e

## Command line interface
usage()
{
	cat << EOF

Usage: $0 [-i initrd] kernel

Options:
  -i initrd	Path to initial ram disk to boot with.

See udm-kernel-boot(8) for further details.

EOF
}

INITRD_IMAGE=

[ $# -eq 0 ] && usage
while getopts ":hi:" arg; do
    case $arg in
    i)
        INITRD_IMAGE=$OPTARG
        ;;
    h | *) # Display help.
        usage
        exit 0
        ;;
    esac
done
shift $((OPTIND - 1))

KERNEL_IMAGE=$1
TOOLS_PATH=/usr/lib/udm-kernel-tools

if [ ! -f "$KERNEL_IMAGE" ]; then
    usage
    exit 1
fi

copy() {
    scp -P "$(cat /etc/unifi-os/ssh_proxy_port)" -o StrictHostKeyChecking=no -q -r "$1" "root@localhost:$2"
}

# Function to prepare the host system.
# This will copy over udm-kernel-tools, kexec and kernel image to host
udm_prepare() {
    copy $TOOLS_PATH /usr/lib
    copy /sbin/kexec /sbin/
    copy "$1" "/tmp/$(basename "$1")"
    if [ -n "$2" ]; then
        copy "$2" "/tmp/$(basename "$2")"
    fi
    copy $TOOLS_PATH/udm-kernel-boot.init.d /etc/init.d/S00000kexec
}

# Function to load kernel image into memory.
udm_load_kernel() {
    if [ -n "$2" ]; then
        ssh-proxy "$TOOLS_PATH/udm-kernel-do-load /tmp/$(basename "$1") /tmp/$(basename "$2")"
    else
        ssh-proxy "$TOOLS_PATH/udm-kernel-do-load /tmp/$(basename "$1")"
    fi
}

# Function to boot into kernel.
udm_boot_kernel() {
    ssh-proxy "reboot"
}

udm_prepare "$KERNEL_IMAGE" "$INITRD_IMAGE"
udm_load_kernel "$KERNEL_IMAGE" "$INITRD_IMAGE"

echo "Rebooting into kernel..."
udm_boot_kernel
